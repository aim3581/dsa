<mxfile host="65bd71144e">
    <diagram id="ztIxel0lckCqBt_GZKXf" name="Page-1">
        <mxGraphModel dx="850" dy="549" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;font style=&quot;font-size: 22px;&quot;&gt;&lt;b&gt;File System&lt;/b&gt;&lt;/font&gt; in OS" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="270" y="20" width="180" height="40" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="&lt;div&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;1. Components of a File System:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;Superblock: Contains metadata about the file system, such as the total number of blocks, block size, and free block list.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;Inode Table: Inodes are data structures that store information about files,&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;such as permissions, size, and pointers to data blocks.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;Data Blocks: Actual content of files is stored in data blocks.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;Free Block List: Keeps track of available blocks that can be allocated for new files.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=22;" vertex="1" parent="1">
                    <mxGeometry y="60" width="850" height="250" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Superblock&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Inode Table&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Data Blocks&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Free Block List&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=15;" vertex="1" parent="1">
                    <mxGeometry x="120" y="280" width="220" height="190" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="&lt;div&gt;Class Superblock:&lt;/div&gt;&lt;div&gt;- total_blocks: int&lt;/div&gt;&lt;div&gt;- block_size: int&lt;/div&gt;&lt;div&gt;- free_block_list: List[int]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;+ init(total_blocks: int, block_size: int)&lt;/div&gt;&lt;div&gt;+ allocate_block() -&amp;gt; int&lt;/div&gt;&lt;div&gt;+ deallocate_block(block_number: int)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=15;" vertex="1" parent="1">
                    <mxGeometry x="70" y="460" width="280" height="180" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="&lt;div&gt;Class Inode:&lt;/div&gt;&lt;div&gt;- permissions: str&lt;/div&gt;&lt;div&gt;- size: int&lt;/div&gt;&lt;div&gt;- data_blocks: List[int]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;+ init(permissions: str)&lt;/div&gt;&lt;div&gt;+ add_data_block(block_number: int)&lt;/div&gt;&lt;div&gt;+ remove_data_block(block_number: int)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=15;" vertex="1" parent="1">
                    <mxGeometry x="70" y="630" width="300" height="180" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="&lt;div&gt;Class FileSystem:&lt;/div&gt;&lt;div&gt;- superblock: Superblock&lt;/div&gt;&lt;div&gt;- inodes: Dict[int, Inode]&lt;/div&gt;&lt;div&gt;- data_blocks: List[str]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;+ init(total_blocks: int, block_size: int)&lt;/div&gt;&lt;div&gt;+ create_file(permissions: str) -&amp;gt; int&lt;/div&gt;&lt;div&gt;+ write_file(file_id: int, content: str)&lt;/div&gt;&lt;div&gt;+ read_file(file_id: int) -&amp;gt; str&lt;/div&gt;&lt;div&gt;+ delete_file(file_id: int)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=15;" vertex="1" parent="1">
                    <mxGeometry x="70" y="800" width="270" height="210" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Superblock&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Total Blocks: 100&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Block Size: 4096 bytes&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Free Blocks: [1, 2, 5, ...]&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Inode Table&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Inode #1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Permissions: rw-r--r--&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Size: 8192 bytes&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Data Blocks: [7, 15, 28, ...]&amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Inode #2&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Permissions: rw-rw-rw-&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Size: 6144 bytes&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;| Data Blocks: [3, 9, 12, ...]&amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;...&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Data Blocks&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Block #1: &quot;Hello, World!&quot;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Block #2: &quot;This is a file.&quot;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Block #3: &quot;More content...&quot;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;...&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;| Free Block List&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;| Free Blocks: [4, 6, 8, ...]&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/div&gt;&lt;div&gt;+-----------------------------------+&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=15;" vertex="1" parent="1">
                    <mxGeometry x="60" y="1010" width="240" height="590" as="geometry"/>
                </mxCell>
                <mxCell id="12" value="&lt;div&gt;class Superblock {&lt;/div&gt;&lt;div&gt;&amp;nbsp; constructor(totalBlocks, blockSize) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.totalBlocks = totalBlocks;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.blockSize = blockSize;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.freeBlockList = Array.from({ length: totalBlocks }, (_, index) =&amp;gt; index);&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; allocateBlock() {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (this.freeBlockList.length &amp;gt; 0) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return this.freeBlockList.pop();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; throw new Error('No free blocks available.');&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; deallocateBlock(blockNumber) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.freeBlockList.push(blockNumber);&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;class Inode {&lt;/div&gt;&lt;div&gt;&amp;nbsp; constructor(permissions) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.permissions = permissions;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.size = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.dataBlocks = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; addDataBlock(blockNumber) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.dataBlocks.push(blockNumber);&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; removeDataBlock(blockNumber) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const index = this.dataBlocks.indexOf(blockNumber);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (index !== -1) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; this.dataBlocks.splice(index, 1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;class FileSystem {&lt;/div&gt;&lt;div&gt;&amp;nbsp; constructor(totalBlocks, blockSize) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.superblock = new Superblock(totalBlocks, blockSize);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.inodes = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.dataBlocks = Array.from({ length: totalBlocks }, () =&amp;gt; '');&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; createFile(permissions) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const inode = new Inode(permissions);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const inodeIndex = Object.keys(this.inodes).length + 1;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; this.inodes[inodeIndex] = inode;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return inodeIndex;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; writeToFile(fileId, content) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (this.inodes[fileId]) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const inode = this.inodes[fileId];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const blockNumber = this.superblock.allocateBlock();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; this.dataBlocks[blockNumber] = content;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; inode.addDataBlock(blockNumber);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; inode.size += content.length;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; throw new Error('File not found.');&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; readFromFile(fileId) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (this.inodes[fileId]) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const inode = this.inodes[fileId];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; let content = '';&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; for (const blockNumber of inode.dataBlocks) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content += this.dataBlocks[blockNumber];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return content;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; throw new Error('File not found.');&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; deleteFile(fileId) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (this.inodes[fileId]) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const inode = this.inodes[fileId];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; for (const blockNumber of inode.dataBlocks) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.superblock.deallocateBlock(blockNumber);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.dataBlocks[blockNumber] = '';&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; delete this.inodes[fileId];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; throw new Error('File not found.');&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// Create a file system with 100 blocks of size 4096 bytes each&lt;/div&gt;&lt;div&gt;const fileSystem = new FileSystem(100, 4096);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// Create a file&lt;/div&gt;&lt;div&gt;const fileId = fileSystem.createFile('rw-r--r--');&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// Write to the file&lt;/div&gt;&lt;div&gt;fileSystem.writeToFile(fileId, 'Hello, World!\nThis is a test file.\n');&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// Read from the file&lt;/div&gt;&lt;div&gt;const content = fileSystem.readFromFile(fileId);&lt;/div&gt;&lt;div&gt;console.log(content);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// Delete the file&lt;/div&gt;&lt;div&gt;fileSystem.deleteFile(fileId);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=15;" vertex="1" parent="1">
                    <mxGeometry x="20" y="1600" width="530" height="1960" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>